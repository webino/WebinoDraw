<?php
/**
 * Webino (http://webino.sk)
 *
 * @link        https://github.com/webino/WebinoDraw for the canonical source repository
 * @copyright   Copyright (c) 2012-2017 Webino, s. r. o. (http://webino.sk)
 * @author      Peter Bačinský <peter@bacinsky.sk>
 * @license     BSD-3-Clause
 */

namespace WebinoDraw\Event;

use PHPUnit_Framework_Assert as PhpUnitAssert;
use ReflectionProperty;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-07-31 at 21:39:36.
 */
class DrawEventTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DrawEvent
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DrawEvent;
    }

    /**
     * @covers WebinoDraw\Event\DrawEvent::getHelper
     * @todo   Implement testGetHelper().
     */
    public function testGetHelper()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers WebinoDraw\Event\DrawEvent::setHelper
     * @todo   Implement testSetHelper().
     */
    public function testSetHelper()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers WebinoDraw\Event\DrawEvent::getNodes
     */
    public function testGetNodes()
    {
        $nodes = $this->getMock('WebinoDraw\Dom\NodeList', [], [], '', false);

        $attribute = new ReflectionProperty($this->object, 'nodes');
        $attribute->setAccessible(true);
        $attribute->setValue($this->object, $nodes);

        $this->assertSame($nodes, $this->object->getNodes());
    }

    /**
     * @covers WebinoDraw\Event\DrawEvent::getNodes
     */
    public function testGetNodesThrowsException()
    {
        $this->setExpectedException('WebinoDraw\Exception\RuntimeException');
        $this->object->getNodes();
    }

    /**
     * @covers WebinoDraw\Event\DrawEvent::setNodes
     */
    public function testSetNodes()
    {
        $nodes = $this->getMock('WebinoDraw\Dom\NodeList', [], [], '', false);

        // test fluent
        $this->assertSame($this->object, $this->object->setNodes($nodes));

        $this->assertSame($nodes, $this->object->getParam('nodes'));
        $this->assertSame($nodes, PhpUnitAssert::readAttribute($this->object, 'nodes'));
    }

    /**
     * @covers WebinoDraw\Event\DrawEvent::getSpec
     */
    public function testGetSpec()
    {
        $this->assertThat(
            $this->object->getSpec(),
            $this->isInstanceOf('ArrayObject')
        );

        $spec = $this->getMock('ArrayObject');

        $attribute = new ReflectionProperty($this->object, 'spec');
        $attribute->setAccessible(true);
        $attribute->setValue($this->object, $spec);

        $this->assertSame($spec, $this->object->getSpec());
    }

    /**
     * @covers WebinoDraw\Event\DrawEvent::setSpec
     */
    public function testSetSpec()
    {
        $spec = [['rewritten']];

        $targetSpec = [['torewrite'], 'original'];
        $mergedSpec = [['rewritten'], 'original'];

        $specObject = $this->getMock('ArrayObject');

        $specObject->expects($this->once())
            ->method('getArrayCopy')
            ->will($this->returnValue($targetSpec));

        $specObject->expects($this->once())
            ->method('exchangeArray')
            ->with($this->equalTo($mergedSpec));

        $this->object->setSpec($specObject);

        // test fluent
        $this->assertSame($this->object, $this->object->setSpec($spec));

        $this->assertSame($specObject, $this->object->getParam('spec'));
        $this->assertSame($specObject, PhpUnitAssert::readAttribute($this->object, 'spec'));
    }

    /**
     * @covers WebinoDraw\Event\DrawEvent::setSpec
     */
    public function testSetSpecCreate()
    {
        $spec = [['rewritten']];

        // test fluent
        $this->assertSame($this->object, $this->object->setSpec($spec));

        $this->assertThat(
            $this->object->getParam('spec'),
            $this->isInstanceOf('ArrayObject')
        );

        $this->assertThat(
            PhpUnitAssert::readAttribute($this->object, 'spec'),
            $this->isInstanceOf('ArrayObject')
        );
    }

    /**
     * @covers WebinoDraw\Event\DrawEvent::clearSpec
     * @todo   Implement testClearSpec().
     */
    public function testClearSpec()
    {
        // test fluent
        $this->assertSame($this->object, $this->object->clearSpec());
        $this->assertSame(null, PhpUnitAssert::readAttribute($this->object, 'spec'));
    }

    /**
     * @covers WebinoDraw\Event\DrawEvent::setVar
     * @todo   Implement testSetVar().
     */
    public function testSetVar()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
