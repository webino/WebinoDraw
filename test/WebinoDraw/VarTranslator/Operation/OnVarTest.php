<?php

namespace WebinoDraw\VarTranslator\Operation;

use WebinoDraw\VarTranslator\Translation;
use WebinoDraw\VarTranslator\Operation\OnVar as Plugin;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-07 at 13:26:43.
 */
class OnVarTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var OnVar
     */
    protected $object;

    /**
     * @var callable
     */
    protected $callback;

    /**
     * @var bool
     */
    protected $result = false;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new OnVar;
        $this->object->setPlugin(new Plugin\EqualTo);
        $this->object->setPlugin(new Plugin\NotEqualTo);
        $this->object->setPlugin(new Plugin\GreaterThan);
        $this->object->setPlugin(new Plugin\LessThan);

        $this->callback = function () {
            $this->result = true;
        };
    }

    /**
     *
     */
    public function testEqualToPass()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'equalTo' => 1,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertTrue($this->result);
    }

    /**
     *
     */
    public function testEqualToPassNot()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'equalTo' => 2,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertFalse($this->result);
    }

    /**
     *
     */
    public function testNotEqualToPass()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'notEqualTo' => 2,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertTrue($this->result);
    }

    /**
     *
     */
    public function testNotEqualToPassNot()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'notEqualTo' => 1,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertFalse($this->result);
    }

    /**
     *
     */
    public function testGreaterThanPass()
    {
        $spec = [
            'example' => [
                'var' => 2,
                'greaterThan' => 1,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertTrue($this->result);
    }

    /**
     *
     */
    public function testGreaterThanPassNot()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'greaterThan' => 2,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertFalse($this->result);
    }

    /**
     *
     */
    public function testGreaterThanPassNotEqual()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'greaterThan' => 1,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertFalse($this->result);
    }

    /**
     *
     */
    public function testGreaterThanOrEqualToPass()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'greaterThan' => 2,
                'equalTo' => 1,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertTrue($this->result);
    }

    /**
     *
     */
    public function testGreaterThanOrEqualToPassReversed()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'equalTo' => 1,
                'greaterThan' => 2,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertTrue($this->result);
    }

    /**
     *
     */
    public function testGreaterThanAndNotEqualToPassNot()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'greaterThan' => 0,
                'andNotEqualTo' => 1,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertFalse($this->result);
    }

    /**
     *
     */
    public function testLessThanPass()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'lessThan' => 2,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertTrue($this->result);
    }

    /**
     *
     */
    public function testLessThanPassNot()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'lessThan' => 0,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertFalse($this->result);
    }

    /**
     *
     */
    public function testLessThanPassNotEqual()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'lessThan' => 1,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertFalse($this->result);
    }

    /**
     *
     */
    public function testLessThanOrEqualToPass()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'lessThan' => 1,
                'equalTo' => 1,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertTrue($this->result);
    }

    /**
     *
     */
    public function testLessThanAndEqualToPassNot()
    {
        $spec = [
            'example' => [
                'var' => 1,
                'lessThan' => 2,
                'andEqualTo' => 2,
            ],
        ];

        $this->object->apply(new Translation, $spec, $this->callback);
        $this->assertFalse($this->result);
    }
}
