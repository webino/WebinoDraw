<?php
/**
 * Webino (http://webino.sk)
 *
 * @link        https://github.com/webino/WebinoDraw for the canonical source repository
 * @copyright   Copyright (c) 2012-2014 Webino, s. r. o. (http://webino.sk)
 * @author      Peter Bačinský <peter@bacinsky.sk>
 * @license     BSD-3-Clause
 */

namespace WebinoDraw\Instructions;

use DOMDocument;
use WebinoDraw\Dom\Locator;
use WebinoDraw\Dom\NodeList;
use WebinoDraw\Draw\HelperPluginManager;
use WebinoDraw\Factory\InstructionsFactory;

/**
 * Test class for Instructions.
 * Generated by PHPUnit on 2013-03-18 at 13:49:38.
 */
class InstructionsRendererTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Instructions
     */
    protected $object;

    /**
     * @var HelperPluginManager
     */
    protected $drawHelpers;

    /**
     * @var Locator
     */
    protected $locator;

    /**
     * @var \WebinoDraw\Factory\NodeListFactory
     */
    protected $nodesFactory;

    /**
     * @var InstructionsFactory
     */
    protected $instructionsFactory;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->drawHelpers         = $this->getMock('WebinoDraw\Draw\HelperPluginManager', [], [], '', false);
        $this->locator             = $this->getMock('WebinoDraw\Dom\Locator', [], [], '', false);
        $this->nodesFactory        = $this->getMock('WebinoDraw\Dom\Factory\NodeListFactory', [], [], '', false);
        $this->instructionsFactory = new InstructionsFactory;
        $options                   = $this->getMock('WebinoDraw\Options\ModuleOptions');

        $this->object = new InstructionsRenderer(
            $this->drawHelpers,
            $this->locator,
            $this->nodesFactory,
            $this->instructionsFactory,
            $options
        );
    }

    /**
     * @covers WebinoDraw\Instructions\InstructionsRenderer::render
     */
    public function testRender()
    {
        $dom        = new DOMDocument;
        $dom->registerNodeClass('DOMElement', 'WebinoDraw\Dom\Element');
        $dom->loadXML('<root/>');
        $vars       = ['test_var' => 'test_val'];
        $drawHelper = $this->getMock('WebinoDraw\Draw\Helper\Element');
        $nodeList   = new NodeList($this->locator, $dom->childNodes);

        $spec = [
            'locator' => 'body',
            'helper'  => 'WebinoDrawElement',
        ];

        $instructions = ['test-node' => $spec];

        $this->locator
            ->expects($this->once())
            ->method('locate')
            ->with($dom->documentElement, $spec['locator'])
            ->will($this->returnValue($dom->childNodes));

        $this->drawHelpers
            ->expects($this->once())
            ->method('get')
            ->with($spec['helper'])
            ->will($this->returnValue($drawHelper));

        $this->nodesFactory
            ->expects($this->once())
            ->method('create')
            ->with($dom->childNodes)
            ->will($this->returnValue($nodeList));

        $drawHelper
            ->expects($this->once())
            ->method('setVars')
            ->with($vars)
            ->will($this->returnValue($drawHelper));

        $drawHelper
            ->expects($this->once())
            ->method('__invoke')
            ->with($nodeList, $spec);

        $this->object->render($dom->documentElement, $instructions, $vars);
    }

    /**
     * @covers WebinoDraw\Instructions\InstructionsRenderer::render
     */
    public function testRenderDisabledByEmptyNodes()
    {
        $dom  = new DOMDocument;
        $dom->registerNodeClass('DOMElement', 'WebinoDraw\Dom\Element');
        $dom->loadXML('<root/>');
        $vars = [];

        $spec = [
            'locator' => 'body',
            'helper'  => 'WebinoDrawElement',
        ];

        $instructions = ['test-node' => $spec];
        $this->object->render($dom->documentElement, $instructions, $vars);
    }

    /**
     * @covers WebinoDraw\Instructions\InstructionsRenderer::render
     */
    public function testRenderDisabledByEmptyLocator()
    {
        $dom  = new DOMDocument;
        $dom->registerNodeClass('DOMElement', 'WebinoDraw\Dom\Element');
        $dom->loadXML('<root/>');
        $vars = [];

        $instructions = ['test-node' => []];
        $this->object->render($dom->documentElement, $instructions, $vars);
    }

    /**
     * @covers WebinoDraw\Instructions\InstructionsRenderer::render
     */
    public function testRenderCycle()
    {
        $dom        = new DOMDocument;
        $dom->registerNodeClass('DOMElement', 'WebinoDraw\Dom\Element');
        $dom->loadXML('<root/>');
        $vars       = ['test_var' => 'test_val'];
        $drawHelper = $this->getMock('WebinoDraw\Draw\Helper\Element');
        $nodeList   = new NodeList($this->locator, $dom->childNodes);

        $spec = [
            'locator' => 'body',
            'helper'  => 'WebinoDrawElement',
        ];

        $spec1 = [
            'locator' => 'head',
            'helper'  => 'WebinoDrawElement',
        ];

        $spec2 = [
            'locator' => 'footer',
            'helper'  => 'WebinoDrawElement',
        ];

        $instructions = [
            'test-node1' => $spec1,
            'test-node2' => $spec2,
            'test-node'  => $spec,
        ];

        $this->locator
            ->expects($this->exactly(3))
            ->method('locate')
            ->with(
                $dom->documentElement,
                $this->logicalOr(
                    $spec['locator'],
                    $spec1['locator'],
                    $spec2['locator']
                )
            )
            ->will($this->returnValue($dom->childNodes));

        $this->drawHelpers
            ->expects($this->exactly(3))
            ->method('get')
            ->with($spec['helper'])
            ->will($this->returnValue($drawHelper));

        $this->nodesFactory
            ->expects($this->exactly(3))
            ->method('create')
            ->with($dom->childNodes)
            ->will($this->returnValue($nodeList));

        $drawHelper
            ->expects($this->exactly(3))
            ->method('setVars')
            ->with($vars)
            ->will($this->returnValue($drawHelper));

        $drawHelper
            ->expects($this->exactly(3))
            ->method('__invoke')
            ->with(
                $nodeList,
                $this->logicalOr(
                    $spec,
                    $spec1,
                    $spec2
                )
            );

        $this->object->render($dom->documentElement, $instructions, $vars);
    }
}
