<?php
/**
 * Webino (http://webino.sk)
 *
 * @link        https://github.com/webino/WebinoDraw for the canonical source repository
 * @copyright   Copyright (c) 2012-2014 Webino, s. r. o. (http://webino.sk)
 * @author      Peter Bačinský <peter@bacinsky.sk>
 * @license     New BSD License
 */

namespace WebinoDraw\View\Helper;

use ArrayObject;
use DOMAttr;
use DOMElement;

/**
 * Test class for DrawAbsolutize.
 * Generated by PHPUnit on 2013-04-24 at 11:54:09.
 */
class DrawAbsolutizeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DrawAbsolutize
     */
    protected $object;

    /**
     * @var \Zend\View\Renderer\PhpRenderer
     */
    protected $view;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DrawAbsolutize;

        $this->view = $this->getMock('Zend\View\Renderer\PhpRenderer');
        $this->object->setView($this->view);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::getDefaultLocator
     */
    public function testGetDefaultLocator()
    {
        $expected = array(
            'src'    => 'xpath=//@src' . DrawAbsolutize::LOCATOR_CONDITION,
            'href'   => 'xpath=//@href' . DrawAbsolutize::LOCATOR_CONDITION,
            'action' => 'xpath=//@action' . DrawAbsolutize::LOCATOR_CONDITION,
        );

        $result = DrawAbsolutize::getDefaultLocator();

        $this->assertSame($expected, $result);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::drawNodes
     */
    public function testDrawNodes()
    {
        $nodes = $this->getMock('WebinoDraw\Dom\NodeList');
        $spec  = array();

        $basePath  = '/test/base/path';
        $attrValue = 'test-value';
        $attr      = new DOMAttr('test-attr', $attrValue);

        $nodesIterator = new ArrayObject(array($attr));

        $nodes->expects($this->once())
            ->method('getIterator')
            ->will($this->returnValue($nodesIterator));

        $this->view
            ->expects($this->once())
            ->method('__call')
            ->with($this->equalTo('basePath'))
            ->will($this->returnValue($basePath));

        $this->object->drawNodes($nodes, $spec);

        $this->assertEquals($basePath . '/' . $attrValue, $attr->nodeValue);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::drawNodes
     */
    public function testDrawNodesInvalidAttr()
    {
        $this->setExpectedException('WebinoDraw\Exception\RuntimeException');

        $nodes = $this->getMock('WebinoDraw\Dom\NodeList');
        $spec  = array();

        // invalid attr
        $attr = new DOMElement('test-element');

        $nodesIterator = new ArrayObject(array($attr));

        $nodes->expects($this->once())
            ->method('getIterator')
            ->will($this->returnValue($nodesIterator));

        $this->view
            ->expects($this->once())
            ->method('__call');

        $this->object->drawNodes($nodes, $spec);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::drawNodes
     */
    public function testDrawNodesCycle()
    {
        $nodes = $this->getMock('WebinoDraw\Dom\NodeList');
        $spec  = array();

        $basePath   = '/test/base/path';
        $attrValue  = 'test-value';
        $attrValue2 = 'test-value2';
        $attrValue3 = 'test-value3';
        $attr       = new DOMAttr('test-attr', $attrValue);
        $attr2      = new DOMAttr('test-attr', $attrValue2);
        $attr3      = new DOMAttr('test-attr', $attrValue3);

        $nodesIterator = new ArrayObject(array($attr, $attr2, $attr3));

        $nodes->expects($this->once())
            ->method('getIterator')
            ->will($this->returnValue($nodesIterator));

        $this->view
            ->expects($this->once())
            ->method('__call')
            ->with($this->equalTo('basePath'))
            ->will($this->returnValue($basePath));

        $this->object->drawNodes($nodes, $spec);

        $this->assertEquals($basePath . '/' . $attrValue, $attr->nodeValue);
        $this->assertEquals($basePath . '/' . $attrValue2, $attr2->nodeValue);
        $this->assertEquals($basePath . '/' . $attrValue3, $attr3->nodeValue);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::removeDotSegments
     */
    public function testRemoveDotSegments()
    {
        $path     = '/test-absolute/./test-relative';
        $expected = '/test-absolute/test-relative';

        $result = $this->object->removeDotSegments($path);

        $this->assertEquals($expected, $result);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::removeDotSegments
     */
    public function testRemoveDotSegmentsUp()
    {
        $path     = '/test-absolute/../test-relative';
        $expected = '/test-relative';

        $result = $this->object->removeDotSegments($path);

        $this->assertEquals($expected, $result);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::removeDotSegments
     */
    public function testRemoveDotSegmentsUp2()
    {
        $path     = '/test-absolute/test/test2/../../../test-relative';
        $expected = '/test-relative';

        $result = $this->object->removeDotSegments($path);

        $this->assertEquals($expected, $result);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::removeDotSegments
     */
    public function testRemoveDotSegmentsUpTooMuch()
    {
        $path     = '/test-absolute/../../test-relative';
        $expected = '/test-relative';

        $result = $this->object->removeDotSegments($path);

        $this->assertEquals($expected, $result);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::removeDotSegments
     */
    public function testRemoveDotSegmentsJustDot()
    {
        $path     = '.';
        $expected = '';

        $result = $this->object->removeDotSegments($path);

        $this->assertEquals($expected, $result);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::removeDotSegments
     */
    public function testRemoveDotSegmentsJustDoubleDot()
    {
        $path     = '..';
        $expected = '';

        $result = $this->object->removeDotSegments($path);

        $this->assertEquals($expected, $result);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawAbsolutize::removeDotSegments
     */
    public function testRemoveDotSegmentsSomeShit()
    {
        $path     = './../root/test-absolute/test/../test2/./test3/../.././.././test-relative';
        $expected = 'root/test-relative';

        $result = $this->object->removeDotSegments($path);

        $this->assertEquals($expected, $result);
    }
}
