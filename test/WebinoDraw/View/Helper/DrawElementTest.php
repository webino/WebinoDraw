<?php

namespace WebinoDraw\View\Helper;

/**
 * Test class for DrawElement.
 * Generated by PHPUnit on 2013-03-18 at 20:28:40.
 */
class DrawElementTest
        extends \PHPUnit_Framework_TestCase
{

    /**
     * @var DrawElement
     */
    protected $object;

    /**
     * @var WebinoDraw\Dom\NodeList
     */
    protected $nodeList;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object   = new DrawElement;
        $this->nodeList = $this->getMock('WebinoDraw\Dom\NodeList', array(), array(), '', null);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers WebinoDraw\View\Helper\DrawElement::drawNodes
     * @covers WebinoDraw\View\Helper\DrawElement::manipulateNodes
     * @covers WebinoDraw\View\Helper\DrawElement::setValue
     * @covers WebinoDraw\View\Helper\DrawElement::translateSpec
     */
    public function testDrawNodesValue()
    {
        $spec = array(
            'value' => 'customValue',
        );

        $vars = new \ArrayObject(array('{$var}' => 'val'));

        $varTranslator = $this->getMock('WebinoDraw\Stdlib\VarTranslator');
        $this->object->setVarTranslator($varTranslator);

        $varTranslator->expects($this->exactly(1))
            ->method('makeVarKeys')
            ->with($this->isInstanceOf('ArrayAccess'))
            ->will($this->returnValue($vars));

        $varTranslator->expects($this->once())
            ->method('translate')
            ->with(
                $this->equalTo($spec),
                $this->equalTo($vars)
            );

        $this->nodeList
            ->expects($this->exactly(1))
            ->method('setValue')
            ->with(
                $this->equalTo($spec['value']),
                $this->isInstanceOf('Closure')
            );

        $this->object->drawNodes($this->nodeList, $spec);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawElement::drawNodes
     * @covers WebinoDraw\View\Helper\DrawElement::setHtml
     */
    public function testDrawNodeHtml()
    {
        $spec = array(
            'html' => '<testhtml/>',
        );

        $this->nodeList
            ->expects($this->once())
            ->method('setHtml')
            ->with(
                $this->equalTo($spec['html']),
                $this->isInstanceOf('Closure')
            );

        $this->object->drawNodes($this->nodeList, $spec);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawElement::drawNodes
     * @covers WebinoDraw\View\Helper\DrawElement::replace
     */
    public function testDrawNodesReplace()
    {
        $spec = array(
            'replace' => '<testhtml/>',
        );

        $this->nodeList
            ->expects($this->once())
            ->method('replace')
            ->with($this->equalTo($spec['replace']));

        $this->object->drawNodes($this->nodeList, $spec);
    }

    /**
     * @covers WebinoDraw\View\Helper\DrawElement::drawNodes
     * @covers WebinoDraw\View\Helper\DrawElement::replace
     */
    public function testDrawNodesReplaceWithLocator()
    {
        $dom         = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $dom->xpath  = new \DOMXpath($dom);
        $nodeList    = $this->getMock('WebinoDraw\Dom\NodeList', array(), array(), '', null);
        $locator     = $this->getMock('WebinoDraw\Dom\Locator');
        $xpath       = 'dummyOne';
        $target      = 'xpath=' . $xpath;

        $spec = array(
            'locator' => $target,
            'replace' => '<testhtml/>',
        );

        $locator->expects($this->exactly(2))
            ->method('set')
            ->with($this->equalTo($target))
            ->will($this->returnValue($locator));

        $locator->expects($this->exactly(2))
            ->method('xpathMatchAny')
            ->will($this->returnValue($xpath));

        $nodeList
            ->expects($this->once())
            ->method('getLocator')
            ->will($this->returnValue($locator));

        $nodeList
            ->expects($this->once())
            ->method('getIterator')
            ->will($this->returnValue(new \IteratorIterator($dom->firstChild->childNodes)));

        $subnodeList = $this->getMock('WebinoDraw\Dom\NodeList', array(), array(), '', null);
        $subnodeList
            ->expects($this->exactly(2))
            ->method('replace')
            ->with($this->equalTo($spec['replace']));

        $nodeList
            ->expects($this->exactly(2))
            ->method('createNodeList')
            ->with($this->isInstanceOf('DOMNodeList'))
            ->will($this->returnValue($subnodeList));

        $this->object->drawNodes($nodeList, $spec);
    }
}
