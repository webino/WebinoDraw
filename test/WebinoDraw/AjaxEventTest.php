<?php
/**
 * Webino (http://webino.sk)
 *
 * @link        https://github.com/webino/WebinoDraw for the canonical source repository
 * @copyright   Copyright (c) 2012-2014 Webino, s. r. o. (http://webino.sk)
 * @author      Peter Bačinský <peter@bacinsky.sk>
 * @license     New BSD License
 */

namespace WebinoDraw;

use PHPUnit_Framework_Assert as PhpUnitAssert;
use ReflectionProperty;

/**
 * Test class for AjaxEvent.
 * Generated by PHPUnit on 2013-03-19 at 13:11:09.
 */
class AjaxEventTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AjaxEvent
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new AjaxEvent;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers WebinoDraw\AjaxEvent::setJson
     */
    public function testSetJson()
    {
        $json = array('var' => 'val');

        $ajaxJson = $this->getMock('WebinoDraw\Ajax\Json');

        $ajaxJson->expects($this->once())
            ->method('merge')
            ->with($this->equalTo($json));

        $this->object->setJson($ajaxJson);

        // test fluent
        $this->assertSame($this->object, $this->object->setJson($json));

        $this->assertSame(
            $ajaxJson,
            $this->object->getParam('json')
        );

        $this->assertSame(
            $ajaxJson,
            PhpUnitAssert::readAttribute($this->object, 'json')
        );
    }

    /**
     * @covers WebinoDraw\AjaxEvent::setJson
     */
    public function testSetJsonCreate()
    {
        $json = array('var' => 'val');

        // test fluent
        $this->assertSame($this->object, $this->object->setJson($json));

        $this->assertThat(
            $this->object->getParam('json'),
            $this->isInstanceOf('WebinoDraw\Ajax\Json')
        );

        $this->assertThat(
            PhpUnitAssert::readAttribute($this->object, 'json'),
            $this->isInstanceOf('WebinoDraw\Ajax\Json')
        );
    }

    /**
     * @covers WebinoDraw\AjaxEvent::getJson
     */
    public function testGetJson()
    {
        $this->assertThat(
            $this->object->getJson(),
            $this->isInstanceOf('WebinoDraw\Ajax\Json')
        );

        $json = $this->getMock('WebinoDraw\Ajax\Json');

        $attribute = new ReflectionProperty($this->object, 'json');
        $attribute->setAccessible(true);
        $attribute->setValue($this->object, $json);

        $this->assertSame($json, $this->object->getJson());
    }

    /**
     * @covers WebinoDraw\AjaxEvent::setFragmentXpath
     */
    public function testSetFragmentXpath()
    {
        $xpath = '//test';

        $xpathObject = $this->getMock('WebinoDraw\Ajax\FragmentXpath');

        $xpathObject->expects($this->once())
            ->method('set')
            ->with($this->equalTo($xpath));

        $this->object->setFragmentXpath($xpathObject);

        // test fluent
        $this->assertSame($this->object, $this->object->setFragmentXpath($xpath));

        $this->assertSame($xpathObject, $this->object->getParam('fragmentXpath'));
        $this->assertSame(
            $xpathObject,
            PhpUnitAssert::readAttribute($this->object, 'fragmentXpath')
        );
    }

    /**
     * @covers WebinoDraw\AjaxEvent::setFragmentXpath
     */
    public function testSetFragmentXpathCreate()
    {
        $xpath = '//test';

        // test fluent
        $this->assertSame($this->object, $this->object->setFragmentXpath($xpath));

        $this->assertThat(
            $this->object->getParam('fragmentXpath'),
            $this->isInstanceOf('WebinoDraw\Ajax\FragmentXpath')
        );

        $this->assertThat(
            PhpUnitAssert::readAttribute($this->object, 'fragmentXpath'),
            $this->isInstanceOf('WebinoDraw\Ajax\FragmentXpath')
        );
    }

    /**
     * @covers WebinoDraw\AjaxEvent::getFragmentXpath
     * @todo Implement testGetFragmentXpath().
     */
    public function testGetFragmentXpath()
    {
        $this->assertThat(
            $this->object->getFragmentXpath(),
            $this->isInstanceOf('WebinoDraw\Ajax\FragmentXpath')
        );

        $xpath = $this->getMock('WebinoDraw\Ajax\FragmentXpath');

        $attribute = new ReflectionProperty($this->object, 'fragmentXpath');
        $attribute->setAccessible(true);
        $attribute->setValue($this->object, $xpath);

        $this->assertSame($xpath, $this->object->getFragmentXpath());
    }
}
