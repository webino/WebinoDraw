<?php
/**
 * Webino (http://webino.sk)
 *
 * @link        https://github.com/webino/WebinoDraw for the canonical source repository
 * @copyright   Copyright (c) 2012-2014 Webino, s. r. o. (http://webino.sk)
 * @author      Peter Bačinský <peter@bacinsky.sk>
 * @license     BSD-3-Clause
 */

namespace WebinoDraw\Dom;

use ArrayObject;
use DOMDocument;
use WebinoDraw\Dom\Document;
use WebinoDraw\Dom\Element;
use WebinoDraw\Dom\Locator;
use DOMNode;
use PHPUnit_Framework_Assert as PhpUnitAssert;
use ReflectionProperty;

/**
 * Test class for NodeList.
 * Generated by PHPUnit on 2013-03-19 at 17:48:14.
 */
class NodeListTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var NodeList
     */
    protected $object;

    /**
     * @var Locator
     */
    protected $locator;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->locator = $this->getMock('WebinoDraw\Dom\Locator', [], [], '', false);
        $this->object  = new NodeList($this->locator);
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::create
     */
    public function testCreate()
    {
        $nodeList = new NodeList($this->locator, []);

        $nodeOne = new Element('testOne');
        $nodeTwo = new Element('testTwo');

        $newNodeList = $nodeList->create([$nodeOne, $nodeTwo]);

        $this->assertThat(
            $newNodeList,
            $this->isInstanceOf('WebinoDraw\Dom\NodeList')
        );

        $this->assertSame($nodeOne, $newNodeList->getIterator()->offsetGet(0));
        $this->assertSame($nodeTwo, $newNodeList->getIterator()->offsetGet(1));
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setNodes
     */
    public function testSetNodes()
    {
        $nodes = $this->getMock('DOMNodeList', [], [], '', false);

        // test fluent
        $this->assertSame($this->object, $this->object->setNodes($nodes));

        $attribute = PhpUnitAssert::readAttribute($this->object, 'nodes');

        $this->assertThat($attribute, $this->isInstanceOf('IteratorIterator'));
        $this->assertSame($nodes, $attribute->getInnerIterator());
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setNodes
     */
    public function testSetNodesArray()
    {
        $nodes = [$this->getMock('Element', [], [], '', false)];

        // test fluent
        $this->assertSame($this->object, $this->object->setNodes($nodes));

        $attribute = PhpUnitAssert::readAttribute($this->object, 'nodes');

        $this->assertThat($attribute, $this->isInstanceOf('IteratorIterator'));
        $this->assertSame($nodes, $attribute->getInnerIterator()->getArrayCopy());
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::getIterator
     */
    public function testGetIterator()
    {
        $iterator = new ArrayObject;

        $nodes = $this->getMock('IteratorIterator', [], [], '', false);
        $this->object->setNodes($nodes);

        $nodes->expects($this->once())
            ->method('getInnerIterator')
            ->will($this->returnValue($iterator));

        $this->assertSame($iterator, $this->object->getIterator());
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setEscapeHtml
     */
    public function testSetEscapeHtml()
    {
        $escape = $this->getMock('Zend\View\Helper\EscapeHtml');

        // test fluent
        $this->assertSame($this->object, $this->object->setEscapeHtml($escape));

        $this->assertSame($escape, PhpUnitAssert::readAttribute($this->object, 'escapeHtml'));
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::getEscapeHtml
     */
    public function testGetEscapeHtml()
    {
        $this->assertThat(
            $this->object->getEscapeHtml(),
            $this->isInstanceOf('Zend\View\Helper\EscapeHtml')
        );

        $escape = $this->getMock('Zend\View\Helper\EscapeHtml');

        $attribute = new ReflectionProperty($this->object, 'escapeHtml');
        $attribute->setAccessible(true);
        $attribute->setValue($this->object, $escape);

        $this->assertSame($escape, $this->object->getEscapeHtml());
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setValue
     */
    public function testSetValue()
    {
        $dom      = new Document;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $value    = 'TestValue';
        $expected = '<box><dummyOne>' . $value . '</dummyOne>'
            . '<dummyTwo>' . $value . '</dummyTwo></box>';
        $nodeList = new NodeList($this->locator, $dom->firstChild->childNodes);

        $nodeList->setValue($value);

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setValue
     */
    public function testSetValueWithPreSet()
    {
        $dom      = new Document;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $value    = 'TestValue';
        $expected = '<box><dummyOne>' . $value . 'Modified</dummyOne>'
            . '<dummyTwo>' . $value . 'Modified</dummyTwo></box>';
        $nodeList = new NodeList($this->locator, $dom->firstChild->childNodes);

        $nodeList->setValue(
            $value,
            function (Element $node, $value) {
                return $value . 'Modified';
            }
        );

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setValue
     */
    public function testSetValueEscapeHtml()
    {
        $dom          = new Document;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $value        = '<testnode/>';
        $escapedValue = htmlspecialchars('<testnode/>');
        $expected     = '<box><dummyOne>' . $escapedValue . '</dummyOne>'
            . '<dummyTwo>' . $escapedValue . '</dummyTwo></box>';
        $nodeList     = new NodeList($this->locator, $dom->firstChild->childNodes);

        $nodeList->setValue($value);

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setHtml
     */
    public function testSetHtml()
    {
        $dom      = new Document;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $html     = '<testnode/>';
        $expected = '<box><dummyOne>' . $html . '</dummyOne>'
            . '<dummyTwo>' . $html . '</dummyTwo></box>';
        $nodeList = new NodeList($this->locator, $dom->firstChild->childNodes);

        $nodeList->setHtml($html);

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setHtml
     */
    public function testSetHtmlWithPreSet()
    {
        $dom      = new Document;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $html     = '<testnode/>';
        $expected = '<box><dummyOne>' . $html . '<modified/></dummyOne>'
            . '<dummyTwo>' . $html . '<modified/></dummyTwo></box>';
        $nodeList = new NodeList($this->locator, $dom->firstChild->childNodes);

        $nodeList->setHtml(
            $html,
            function (DOMNode $node, $xhtml) {
                return $xhtml . '<modified/>';
            }
        );

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::appendHtml
     */
    public function testAppendHtml()
    {
        $dom      = new Document;
        $dom->loadXML('<box><dummyOne/><dummyTwo><dummyTwoFc/></dummyTwo></box>');
        $html     = '<testnode/>';
        $expected = '<box><dummyOne>' . $html . '</dummyOne>'
            . '<dummyTwo><dummyTwoFc/>' . $html . '</dummyTwo></box>';
        $nodeList = new NodeList($this->locator, $dom->firstChild->childNodes);

        $result = $nodeList->appendHtml($html);

        $this->assertThat($result, $this->isInstanceOf('WebinoDraw\Dom\NodeList'));
        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setAttribs
     */
    public function testSetAttribs()
    {
        $dom      = new Document;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $attribs  = 'attr0="val0" attr1="0"';
        $expected = '<box><dummyOne ' . $attribs . '/>'
            . '<dummyTwo ' . $attribs . '/></box>';
        $nodeList = new NodeList($this->locator, $dom->firstChild->childNodes);

        $nodeList->setAttribs(['attr0' => 'val0', 'attr1' => '0', 'attr2' => '']);

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setAttribs
     */
    public function testSetAttribsWithPreSet()
    {
        $dom      = new Document;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $_attribs = 'attr0="val0modified" attr1="val1modified"';
        $expected = '<box><dummyOne ' . $_attribs . '/>'
            . '<dummyTwo ' . $_attribs . '/></box>';
        $nodeList = new NodeList($this->locator, $dom->firstChild->childNodes);

        $nodeList->setAttribs(
            ['attr0' => 'val0', 'attr1' => 'val1'],
            function (DOMNode $node, $value) {
                return $value . 'modified';
            }
        );

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::replace
     */
    public function testReplace()
    {
        $dom      = new Document;
        $dom->loadXML('<box><dummyReplaced/><dummyeplaced/></box>');
        $html     = '<dummyeplaced/>';
        $expected = '<box>' . $html . $html . '</box>';
        $nodeList = new NodeList($this->locator, $dom->firstChild->childNodes);

        $nodeList->replace($html);

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::replace
     */
    public function testReplaceWithPreSet()
    {
        $dom      = new Document;
        $dom->loadXML('<box><dummyReplaced/><dummyReplaced/></box>');
        $html     = '<dummyReplaced/>';
        $expected = '<box>' . $html . '<modified/>'
            . $html . '<modified/>' . '</box>';
        $nodeList = new NodeList($this->locator, $dom->firstChild->childNodes);

        $nodeList->replace(
            $html,
            function (DOMNode $node, $html) {
                return $html . '<modified/>';
            }
        );

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::remove
     */
    public function testRemove()
    {
        $dom        = new Document;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $expected   = '<box/>';
        $nodeList   = new NodeList($this->locator, $dom->firstChild->childNodes);
        $xpath      = '.';
        $target     = 'xpath=' . $xpath;

        $this->locator->expects($this->once())
            ->method('set')
            ->with($this->equalTo($target))
            ->will($this->returnValue($this->locator));

        $this->locator->expects($this->once())
            ->method('xpathMatchAny')
            ->will($this->returnValue($xpath));

        $nodeList->remove();

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::remove
     */
    public function testRemoveByXpath()
    {
        $dom        = new Document;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $expected   = '<box><dummyOne/></box>';
        $nodeList   = new NodeList($this->locator, [$dom->firstChild->firstChild]);
        $xpath      = '//dummyTwo';
        $target     = 'xpath=' . $xpath;

        $this->locator->expects($this->once())
            ->method('set')
            ->with($this->equalTo($target))
            ->will($this->returnValue($this->locator));

        $this->locator->expects($this->once())
            ->method('xpathMatchAny')
            ->will($this->returnValue($xpath));

        $nodeList->remove($target);

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::remove
     */
    public function testRemoveFromInvalidDocumentThrowsException()
    {
        $this->setExpectedException('WebinoDraw\Exception\RuntimeException');

        $dom      = new DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $nodeList = new NodeList($this->locator, [$dom->firstChild->firstChild]);

        $this->locator->expects($this->once())
            ->method('set')
            ->with($this->equalTo('xpath=.'))
            ->will($this->returnValue($this->locator));

        $nodeList->remove();
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::each
     */
    public function testEach()
    {
        $dom        = new Document;
        $dom->loadXML('<box><dummyOne><child/><child/></dummyOne><dummyTwo><child/><child/></dummyTwo></box>');
        $nodeList   = new NodeList($this->locator, $dom->firstChild->childNodes);
        $xpath      = './child';
        $target     = 'xpath=' . $xpath;
        $testCase   = $this; // todo PHP 5.4

        $this->locator->expects($this->once())
            ->method('set')
            ->with($this->equalTo($target))
            ->will($this->returnValue($this->locator));

        $this->locator->expects($this->once())
            ->method('xpathMatchAny')
            ->will($this->returnValue($xpath));

        $eachIndex      = 0;
        $eachChildIndex = 0;
        $nodeList->each(
            $target,
            function (NodeList $nodes) use (&$eachIndex, &$eachChildIndex, $testCase, $dom) {

                $testCase->assertSame(
                    current($nodes->getIterator()),
                    $dom->firstChild->childNodes->item($eachIndex)->childNodes->item($eachChildIndex)
                );

                if ($eachChildIndex % 2) {
                    $eachIndex++;
                    $eachChildIndex = 0;
                } else {
                    $eachChildIndex++;
                }
            }
        );
    }
}
