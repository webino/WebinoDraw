<?php

namespace WebinoDraw\Dom;

/**
 * Test class for NodeList.
 * Generated by PHPUnit on 2013-03-19 at 17:48:14.
 */
class NodeListTest
        extends \PHPUnit_Framework_TestCase
{

    /**
     * @var NodeList
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new NodeList;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers WebinoDraw\Dom\NodeList::createNodeList
     */
    public function testCreateNodeList()
    {
        $nodeList = new NodeList(array());

        $nodeOne = new \DOMElement('testOne');
        $nodeTwo = new \DOMElement('testTwo');

        $newNodeList = $nodeList->createNodeList(array($nodeOne, $nodeTwo));

        $this->assertThat(
            $newNodeList,
            $this->isInstanceOf('WebinoDraw\Dom\NodeList')
        );

        $this->assertSame($nodeOne, $newNodeList->getIterator()->offsetGet(0));
        $this->assertSame($nodeTwo, $newNodeList->getIterator()->offsetGet(1));
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setNodes
     */
    public function testSetNodes()
    {
        $nodes = $this->getMock('DOMNodeList', array(), array(), '', false);

        // test fluent
        $this->assertSame($this->object, $this->object->setNodes($nodes));

        $attribute = \PHPUnit_Framework_Assert::readAttribute($this->object, 'nodes');

        $this->assertThat(
            $attribute,
            $this->isInstanceOf('IteratorIterator')
        );

        $this->assertSame(
            $nodes,
            $attribute->getInnerIterator()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setNodes
     */
    public function testSetNodesArray()
    {
        $nodes = array($this->getMock('DOMElement', array(), array(), '', false));

        // test fluent
        $this->assertSame($this->object, $this->object->setNodes($nodes));

        $attribute = \PHPUnit_Framework_Assert::readAttribute($this->object, 'nodes');

        $this->assertThat(
            $attribute,
            $this->isInstanceOf('IteratorIterator')
        );

        $this->assertSame(
            $nodes,
            $attribute->getInnerIterator()->getArrayCopy()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::getIterator
     */
    public function testGetIterator()
    {
        $iterator = new \ArrayObject;

        $nodes = $this->getMock('IteratorIterator', array(), array(), '', false);
        $this->object->setNodes($nodes);

        $nodes->expects($this->once())
            ->method('getInnerIterator')
            ->will($this->returnValue($iterator));

        $this->assertSame(
            $iterator,
            $this->object->getIterator()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setEscapeHtml
     */
    public function testSetEscapeHtml()
    {
        $escape = $this->getMock('Zend\View\Helper\EscapeHtml');

        // test fluent
        $this->assertSame($this->object, $this->object->setEscapeHtml($escape));

        $this->assertSame(
            $escape,
            \PHPUnit_Framework_Assert::readAttribute($this->object, 'escapeHtml')
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::getEscapeHtml
     */
    public function testGetEscapeHtml()
    {
        $this->assertThat(
            $this->object->getEscapeHtml(),
            $this->isInstanceOf('Zend\View\Helper\EscapeHtml')
        );

        $escape = $this->getMock('Zend\View\Helper\EscapeHtml');

        $attribute = new \ReflectionProperty($this->object, 'escapeHtml');
        $attribute->setAccessible(true);
        $attribute->setValue($this->object, $escape);

        $this->assertSame($escape, $this->object->getEscapeHtml());
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setValue
     */
    public function testSetValue()
    {
        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $value      = 'TestValue';
        $expected   = '<box><dummyOne>' . $value . '</dummyOne>'
                    . '<dummyTwo>' . $value . '</dummyTwo></box>';
        $nodeList   = new NodeList($dom->firstChild->childNodes);

        $nodeList->setValue($value);

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setValue
     */
    public function testSetValueWithPreSet()
    {
        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $value      = 'TestValue';
        $expected   = '<box><dummyOne>' . $value . 'Modified</dummyOne>'
                    . '<dummyTwo>' . $value . 'Modified</dummyTwo></box>';
        $nodeList   = new NodeList($dom->firstChild->childNodes);

        $nodeList->setValue(
            $value,
            function (\DOMElement $node, $value) {
                return $value . 'Modified';
            }
        );

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setValue
     */
    public function testSetValueEscapeHtml()
    {
        $dom          = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $value        = '<testnode/>';
        $escapedValue = htmlspecialchars('<testnode/>');
        $expected     = '<box><dummyOne>' . $escapedValue . '</dummyOne>'
                      . '<dummyTwo>' . $escapedValue . '</dummyTwo></box>';
        $nodeList     = new NodeList($dom->firstChild->childNodes);

        $nodeList->setValue($value);

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setHtml
     */
    public function testSetHtml()
    {
        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $html       = '<testnode/>';
        $expected   = '<box><dummyOne>' . $html . '</dummyOne>'
                    . '<dummyTwo>' . $html . '</dummyTwo></box>';
        $nodeList   = new NodeList($dom->firstChild->childNodes);

        $nodeList->setHtml($html);

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setHtml
     */
    public function testSetHtmlWithPreSet()
    {
        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $html       = '<testnode/>';
        $expected   = '<box><dummyOne>' . $html . '<modified/></dummyOne>'
                    . '<dummyTwo>' . $html . '<modified/></dummyTwo></box>';
        $nodeList   = new NodeList($dom->firstChild->childNodes);

        $nodeList->setHtml(
            $html,
            function(\DOMNode $node, $xhtml){
                return $xhtml . '<modified/>';
            }
        );

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setAttribs
     */
    public function testSetAttribs()
    {
        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $attribs    = 'attr0="val0" attr1="0"';
        $expected   = '<box><dummyOne ' . $attribs . '/>'
                    . '<dummyTwo ' . $attribs . '/></box>';
        $nodeList   = new NodeList($dom->firstChild->childNodes);

        $nodeList->setAttribs(
            array('attr0' => 'val0', 'attr1' => '0', 'attr2' => '')
        );

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::setAttribs
     */
    public function testSetAttribsWithPreSet()
    {
        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $attribs    = 'attr0="val0" attr1="val1"';
        $_attribs   = 'attr0="val0modified" attr1="val1modified"';
        $expected   = '<box><dummyOne ' . $_attribs . '/>'
                    . '<dummyTwo ' . $_attribs . '/></box>';
        $nodeList   = new NodeList($dom->firstChild->childNodes);

        $nodeList->setAttribs(
            array('attr0' => 'val0', 'attr1' => 'val1'),
            function (\DOMNode $node, $value) {
                return $value . 'modified';
            }
        );

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::replace
     */
    public function testReplace()
    {
        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyReplaced/><dummyeplaced/></box>');
        $html       = '<dummyeplaced/>';
        $expected   = '<box>' . $html . $html . '</box>';
        $nodeList   = new NodeList($dom->firstChild->childNodes);

        $nodeList->replace($html);

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::replace
     */
    public function testReplaceWithPreSet()
    {
        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyReplaced/><dummyReplaced/></box>');
        $html       = '<dummyReplaced/>';
        $expected   = '<box>' . $html . '<modified/>'
                    . $html . '<modified/>' . '</box>';
        $nodeList   = new NodeList($dom->firstChild->childNodes);

        $nodeList->replace(
            $html,
            function(\DOMNode $node, $html){
                return $html . '<modified/>';
            }
        );

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::remove
     */
    public function testRemove()
    {
        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $expected   = '<box/>';
        $dom->xpath = new \DOMXpath($dom);
        $nodeList   = new NodeList($dom->firstChild->childNodes);

        $nodeList->remove();

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }

    /**
     * @covers WebinoDraw\Dom\NodeList::remove
     */
    public function testRemoveByXpath()
    {
        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $expected   = '<box><dummyOne/></box>';
        $dom->xpath = new \DOMXpath($dom);
        $nodeList   = new NodeList(array($dom->firstChild->firstChild));

        $nodeList->remove('//dummyTwo');

        $this->assertSame(
            '<?xml version="1.0"?>' . PHP_EOL . $expected . PHP_EOL,
            $dom->saveXML()
        );
    }
    
    /**
     * @covers WebinoDraw\Dom\NodeList::remove
     */
    public function testRemoveFromInvalidDocumentThrowsException()
    {
        $this->setExpectedException('WebinoDraw\Exception\RuntimeException');

        $dom        = new \DOMDocument;
        $dom->loadXML('<box><dummyOne/><dummyTwo/></box>');
        $nodeList   = new NodeList(array($dom->firstChild->firstChild));

        $nodeList->remove();
    }
}
