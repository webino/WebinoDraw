<?php
/**
 * Webino (http://webino.sk)
 *
 * @link        https://github.com/webino/WebinoDraw for the canonical source repository
 * @copyright   Copyright (c) 2012-2014 Webino, s. r. o. (http://webino.sk)
 * @author      Peter Bačinský <peter@bacinsky.sk>
 * @license     BSD-3-Clause
 */

namespace WebinoDraw\Service;

use DOMDocument;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-02 at 14:00:27.
 */
class DrawServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DrawService
     */
    protected $object;

    /**
     * @var \WebinoDraw\Options\ModuleOptions
     */
    protected $options;

    /**
     * @var \WebinoDraw\Instructions\InstructionsRenderer
     */
    protected $instructionsRenderer;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->instructionsRenderer = $this->getMock('WebinoDraw\Instructions\InstructionsRenderer', [], [], '', false);
        $this->options = $this->getMock('WebinoDraw\Options\ModuleOptions');
        $this->object  = new DrawService($this->options, $this->instructionsRenderer);
    }

    /**
     * @covers WebinoDraw\Service\DrawService::getOptions
     */
    public function testGetOptions()
    {
        $this->assertSame($this->options, $this->object->getOptions());
    }

    /**
     * @covers WebinoDraw\Service\DrawService::getInstructions
     */
    public function testGetInstructions()
    {
        $instructions = ['test' => []];

        $this->options
            ->expects($this->once())
            ->method('getInstructions')
            ->will($this->returnValue($instructions));

        $this->assertSame($instructions, $this->object->getInstructions());
    }

    /**
     * @covers WebinoDraw\Service\DrawService::setInstructions
     */
    public function testSetInstructions()
    {
        $instructionsArray = ['test' => []];
        $instructions      = $this->getMock('WebinoDraw\Instructions\Instructions');

        $instructions
            ->expects($this->once())
            ->method('merge')
            ->with($instructionsArray);

        $this->options
            ->expects($this->once())
            ->method('getInstructions')
            ->will($this->returnValue($instructions));

        // test fluent
        $this->assertSame($this->object, $this->object->setInstructions($instructionsArray));
    }

    /**
     * @covers WebinoDraw\Service\DrawService::clearInstructions
     */
    public function testClearInstructions()
    {
        $instructions = $this->getMock('WebinoDraw\Instructions\Instructions');

        $instructions
            ->expects($this->once())
            ->method('exchangeArray')
            ->with([]);

        $this->options
            ->expects($this->once())
            ->method('getInstructions')
            ->will($this->returnValue($instructions));

        // test fluent
        $this->assertSame($this->object, $this->object->clearInstructions());
    }

    /**
     * @covers WebinoDraw\Service\DrawService::instructionsFromSet
     */
    public function testInstructionsFromSet()
    {
        $key          = 'testset';
        $instructions = ['test' => []];

        $this->options
            ->expects($this->once())
            ->method('instructionsFromSet')
            ->with($key)
            ->will($this->returnValue($instructions));

        $this->assertSame($instructions, $this->object->instructionsFromSet($key));
    }

    /**
     * @covers WebinoDraw\Service\DrawService::createDom
     */
    public function testCreateDom()
    {
        $dom  = $this->object->createDom('<xhtml attr="attr">text</xhtml>');
        $node = $dom->getElementsByTagName('xhtml')->item(0);

        $this->assertThat($dom, $this->isInstanceOf('DOMDocument'));
        $this->assertThat($dom->xpath, $this->isInstanceOf('DOMXPath'));
        $this->assertThat($node, $this->isInstanceOf('WebinoDraw\Dom\Element'));
        $this->assertThat($node->getAttributeNode('attr'), $this->isInstanceOf('WebinoDraw\Dom\Attr'));
        $this->assertThat($node->firstChild, $this->isInstanceOf('WebinoDraw\Dom\Text'));
    }

    /**
     * @covers WebinoDraw\Service\DrawService::createXmlDom
     * @todo   Implement testCreateXmlDom().
     */
    public function testCreateXmlDom()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers WebinoDraw\Service\DrawService::drawDom
     */
    public function testDrawDom()
    {
        $element      = $this->getMock('WebinoDraw\Dom\Element', [], [], '', false);
        $instructions = ['test' => []];
        $vars         = ['var' => 'val'];

        $this->instructionsRenderer
            ->expects($this->once())
            ->method('render')
            ->with(
                $element,
                $instructions,
                $vars
            );

        // test fluent
        $this->assertSame($this->object, $this->object->drawDom($element, $instructions, $vars));
    }

    /**
     * @covers WebinoDraw\Service\DrawService::draw
     */
    public function testDraw()
    {
        $xhtml      = '<!DOCTYPE html><xhtml/>';
        $savedXhtml = '<!DOCTYPE html>' . PHP_EOL . '<html><body><xhtml></xhtml></body></html>' . PHP_EOL;
        $dom        = new DOMDocument;

        $dom->loadHTML($xhtml);

        $element      = $dom->documentElement;
        $instructions = $this->getMock('WebinoDraw\Stdlib\DrawInstructions');
        $vars         = ['var' => 'val'];

        $this->instructionsRenderer
            ->expects($this->once())
            ->method('render')
            ->with(
                $element,
                $instructions,
                $vars
            );

        $this->assertEquals($savedXhtml, $this->object->draw($xhtml, $instructions, $vars));
    }

    /**
     * @covers WebinoDraw\Service\DrawService::draw
     * @covers WebinoDraw\Service\DrawService::drawXml
     */
    public function testDrawXml()
    {
        $xml      = '<xhtml/>';
        $savedXml = '<?xml version="1.0"?>' . PHP_EOL . '<xhtml/>' . PHP_EOL;
        $dom      = new DOMDocument;

        $dom->loadXML($xml);

        $element      = $dom->documentElement;
        $instructions = $this->getMock('WebinoDraw\Stdlib\DrawInstructions');
        $vars         = ['var' => 'val'];

        $this->instructionsRenderer
            ->expects($this->once())
            ->method('render')
            ->with(
                $element,
                $instructions,
                $vars
            );

        $this->assertEquals($savedXml, $this->object->drawXml($xml, $instructions, $vars));
    }
}
